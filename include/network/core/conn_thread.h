/*
 * conn_thread.h
 *
 *  Created on: Apr 28, 2017
 *      Author: jeffrey
 */
/*
 * Copyright (c) <2017>, Memcached
 * All rights reserved.
 * This source code copy from Memcached Open Source
 * format for Network bu Jeffrey..
 */
#ifndef CONN_THREAD_H_
#define CONN_THREAD_H_
#include <event.h>
#include <pthread.h>
#include <network/core/conn_base.h>
#ifdef __cplusplus
extern "C" {
#endif

#define THREAD_STATS_FIELDS \
    X(get_cmds) \
    X(get_misses) \
    X(get_expired) \
    X(get_flushed) \
    X(touch_cmds) \
    X(touch_misses) \
    X(delete_misses) \
    X(incr_misses) \
    X(decr_misses) \
    X(cas_misses) \
    X(bytes_read) \
    X(bytes_written) \
    X(flush_cmds) \
    X(conn_yields) /* # of yields for connections (-R option)*/ \
    X(auth_cmds) \
    X(auth_errors) \
    X(idle_kicks) /* idle connections killed */

/**
 * Stats stored per-thread.
 */
struct thread_stats {
	pthread_mutex_t mutex;
#define X(name) uint64_t    name;
	THREAD_STATS_FIELDS
#undef X
#if 0
	struct slab_stats slab_stats[MAX_NUMBER_OF_SLAB_CLASSES];
#endif
};

typedef struct LIBEVENT_THREAD LIBEVENT_THREAD;
struct LIBEVENT_THREAD {
	pthread_t thread_id; /* unique ID of this thread */
	struct event_base *base; /* libevent handle this thread uses */
	struct event notify_event; /* listen event for notify pipe */
	int notify_receive_fd; /* receiving end of notify pipe */
	int notify_send_fd; /* sending end of notify pipe */
	struct thread_stats stats; /* Stats generated by this thread */
	struct conn_queue *new_conn_queue; /* queue of new connections to handle */
#if 0
	cache_t *suffix_cache; /* suffix cache */
	logger *l; /* logger buffer */
	void *lru_bump_buf; /* async LRU bump buffer */
#endif

};

void conn_thread_init(int nthreads);

void dispatch_conn_new(int sfd, enum conn_states init_state, int event_flags,
		int read_buffer_size, enum network_transport transport);

#ifdef __cplusplus
}
#endif

#endif /* CONN_THREAD_H_ */
